{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode'; // create a new class to instantiate for a user\n\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  } // check if user's logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token); // handwaiving here\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        localStorage.removeItem('id_token');\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.reload();\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","localStorage","removeItem","err","getItem","login","idToken","setItem","window","location","assign","logout","reload"],"sources":["/Users/dennisdowner/Documents/GT_Bootcamp/21-MERN/Book-Search-Engine/client/src/utils/auth.js"],"sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        localStorage.removeItem('id_token');\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;EAChB;EACAC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACD,CAJe,CAMhB;;;EACAC,QAAQ,GAAG;IACT;IACA,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;IACA,OAAOE,KAAK,IAAI,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAjB,CAHS,CAGoC;EAC9C,CAXe,CAahB;;;EACAC,cAAc,CAACD,KAAD,EAAQ;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;MACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QACnCC,YAAY,CAACC,UAAb,CAAwB,UAAxB;QACA,OAAO,IAAP;MACD,CAHD,MAGO,OAAO,KAAP;IACR,CAND,CAME,OAAOC,GAAP,EAAY;MACZ,OAAO,KAAP;IACD;EACF;;EAEDV,QAAQ,GAAG;IACT;IACA,OAAOQ,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;EACD;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACb;IACAL,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IACAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;EAEDC,MAAM,GAAG;IACP;IACAV,YAAY,CAACC,UAAb,CAAwB,UAAxB,EAFO,CAGP;;IACAM,MAAM,CAACC,QAAP,CAAgBG,MAAhB;EACD;;AA1Ce;;AA6ClB,eAAe,IAAIrB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}